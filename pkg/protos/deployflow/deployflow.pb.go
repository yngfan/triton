// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: deployflow/deployflow.proto

package deployflow

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DeployMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *DeployMeta) Reset() {
	*x = DeployMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployMeta) ProtoMessage() {}

func (x *DeployMeta) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployMeta.ProtoReflect.Descriptor instead.
func (*DeployMeta) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{0}
}

func (x *DeployMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeployMeta) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeployFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace    string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	InstanceName string                 `protobuf:"bytes,2,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Action       string                 `protobuf:"bytes,3,opt,name=action,proto3" json:"action,omitempty"`
	Start        int32                  `protobuf:"varint,4,opt,name=start,proto3" json:"start,omitempty"`
	PageSize     int32                  `protobuf:"varint,5,opt,name=pageSize,proto3" json:"pageSize,omitempty"`
	After        *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *DeployFilter) Reset() {
	*x = DeployFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployFilter) ProtoMessage() {}

func (x *DeployFilter) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployFilter.ProtoReflect.Descriptor instead.
func (*DeployFilter) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{1}
}

func (x *DeployFilter) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeployFilter) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *DeployFilter) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *DeployFilter) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DeployFilter) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *DeployFilter) GetAfter() *timestamppb.Timestamp {
	if x != nil {
		return x.After
	}
	return nil
}

type TargetState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stage   string `protobuf:"bytes,1,opt,name=stage,proto3" json:"stage,omitempty"`
	Batches int32  `protobuf:"varint,2,opt,name=batches,proto3" json:"batches,omitempty"`
}

func (x *TargetState) Reset() {
	*x = TargetState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetState) ProtoMessage() {}

func (x *TargetState) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetState.ProtoReflect.Descriptor instead.
func (*TargetState) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{2}
}

func (x *TargetState) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *TargetState) GetBatches() int32 {
	if x != nil {
		return x.Batches
	}
	return 0
}

type PodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Ip           string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Port         int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Phase        string `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	PullInStatus string `protobuf:"bytes,5,opt,name=pullInStatus,proto3" json:"pullInStatus,omitempty"`
}

func (x *PodInfo) Reset() {
	*x = PodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodInfo) ProtoMessage() {}

func (x *PodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodInfo.ProtoReflect.Descriptor instead.
func (*PodInfo) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{3}
}

func (x *PodInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PodInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *PodInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PodInfo) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *PodInfo) GetPullInStatus() string {
	if x != nil {
		return x.PullInStatus
	}
	return ""
}

type Batch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Batch          int32                  `protobuf:"varint,1,opt,name=batch,proto3" json:"batch,omitempty"`
	BatchSize      int32                  `protobuf:"varint,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	Canary         bool                   `protobuf:"varint,3,opt,name=canary,proto3" json:"canary,omitempty"`
	Phase          string                 `protobuf:"bytes,4,opt,name=phase,proto3" json:"phase,omitempty"`
	FailedReplicas int32                  `protobuf:"varint,5,opt,name=failedReplicas,proto3" json:"failedReplicas,omitempty"`
	Pods           []*PodInfo             `protobuf:"bytes,6,rep,name=pods,proto3" json:"pods,omitempty"`
	StartedAt      *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt     *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
}

func (x *Batch) Reset() {
	*x = Batch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Batch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Batch) ProtoMessage() {}

func (x *Batch) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Batch.ProtoReflect.Descriptor instead.
func (*Batch) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{4}
}

func (x *Batch) GetBatch() int32 {
	if x != nil {
		return x.Batch
	}
	return 0
}

func (x *Batch) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Batch) GetCanary() bool {
	if x != nil {
		return x.Canary
	}
	return false
}

func (x *Batch) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Batch) GetFailedReplicas() int32 {
	if x != nil {
		return x.FailedReplicas
	}
	return 0
}

func (x *Batch) GetPods() []*PodInfo {
	if x != nil {
		return x.Pods
	}
	return nil
}

func (x *Batch) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Batch) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

type Deploy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace             string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name                  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	AppID                 int32                  `protobuf:"varint,3,opt,name=appID,proto3" json:"appID,omitempty"`
	GroupID               int32                  `protobuf:"varint,4,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AppName               string                 `protobuf:"bytes,5,opt,name=appName,proto3" json:"appName,omitempty"`
	CloneSetName          string                 `protobuf:"bytes,6,opt,name=clonesetName,proto3" json:"clonesetName,omitempty"`
	Replicas              int32                  `protobuf:"varint,7,opt,name=replicas,proto3" json:"replicas,omitempty"`
	Action                string                 `protobuf:"bytes,8,opt,name=action,proto3" json:"action,omitempty"`
	AvailableReplicas     int32                  `protobuf:"varint,9,opt,name=availableReplicas,proto3" json:"availableReplicas,omitempty"`
	UpdatedReplicas       int32                  `protobuf:"varint,10,opt,name=updatedReplicas,proto3" json:"updatedReplicas,omitempty"`
	UpdatedReadyReplicas  int32                  `protobuf:"varint,11,opt,name=updatedReadyReplicas,proto3" json:"updatedReadyReplicas,omitempty"`
	UpdateRevision        string                 `protobuf:"bytes,12,opt,name=updateRevision,proto3" json:"updateRevision,omitempty"`
	Conditions            []*Batch               `protobuf:"bytes,13,rep,name=conditions,proto3" json:"conditions,omitempty"`
	Paused                bool                   `protobuf:"varint,14,opt,name=paused,proto3" json:"paused,omitempty"`
	Phase                 string                 `protobuf:"bytes,15,opt,name=phase,proto3" json:"phase,omitempty"`
	Finished              bool                   `protobuf:"varint,16,opt,name=finished,proto3" json:"finished,omitempty"`
	Batches               int32                  `protobuf:"varint,17,opt,name=batches,proto3" json:"batches,omitempty"`
	BatchSize             int32                  `protobuf:"varint,18,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	FinishedBatches       int32                  `protobuf:"varint,19,opt,name=finishedBatches,proto3" json:"finishedBatches,omitempty"`
	FinishedReplicas      int32                  `protobuf:"varint,20,opt,name=finishedReplicas,proto3" json:"finishedReplicas,omitempty"`
	FailedReplicas        int32                  `protobuf:"varint,21,opt,name=failedReplicas,proto3" json:"failedReplicas,omitempty"`
	StartedAt             *timestamppb.Timestamp `protobuf:"bytes,22,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
	FinishedAt            *timestamppb.Timestamp `protobuf:"bytes,23,opt,name=finishedAt,proto3" json:"finishedAt,omitempty"`
	UpdatedAt             *timestamppb.Timestamp `protobuf:"bytes,29,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Mode                  string                 `protobuf:"bytes,24,opt,name=mode,proto3" json:"mode,omitempty"`
	BatchIntervalSeconds  int32                  `protobuf:"varint,25,opt,name=batchIntervalSeconds,proto3" json:"batchIntervalSeconds,omitempty"`
	TimeoutSeconds        int32                  `protobuf:"varint,26,opt,name=timeoutSeconds,proto3" json:"timeoutSeconds,omitempty"`
	GracefulPeriodSeconds int32                  `protobuf:"varint,27,opt,name=gracefulPeriodSeconds,proto3" json:"gracefulPeriodSeconds,omitempty"`
	Canary                int32                  `protobuf:"varint,28,opt,name=canary,proto3" json:"canary,omitempty"`
}

func (x *Deploy) Reset() {
	*x = Deploy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deploy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deploy) ProtoMessage() {}

func (x *Deploy) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deploy.ProtoReflect.Descriptor instead.
func (*Deploy) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{5}
}

func (x *Deploy) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Deploy) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Deploy) GetAppID() int32 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *Deploy) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *Deploy) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Deploy) GetCloneSetName() string {
	if x != nil {
		return x.CloneSetName
	}
	return ""
}

func (x *Deploy) GetReplicas() int32 {
	if x != nil {
		return x.Replicas
	}
	return 0
}

func (x *Deploy) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Deploy) GetAvailableReplicas() int32 {
	if x != nil {
		return x.AvailableReplicas
	}
	return 0
}

func (x *Deploy) GetUpdatedReplicas() int32 {
	if x != nil {
		return x.UpdatedReplicas
	}
	return 0
}

func (x *Deploy) GetUpdatedReadyReplicas() int32 {
	if x != nil {
		return x.UpdatedReadyReplicas
	}
	return 0
}

func (x *Deploy) GetUpdateRevision() string {
	if x != nil {
		return x.UpdateRevision
	}
	return ""
}

func (x *Deploy) GetConditions() []*Batch {
	if x != nil {
		return x.Conditions
	}
	return nil
}

func (x *Deploy) GetPaused() bool {
	if x != nil {
		return x.Paused
	}
	return false
}

func (x *Deploy) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Deploy) GetFinished() bool {
	if x != nil {
		return x.Finished
	}
	return false
}

func (x *Deploy) GetBatches() int32 {
	if x != nil {
		return x.Batches
	}
	return 0
}

func (x *Deploy) GetBatchSize() int32 {
	if x != nil {
		return x.BatchSize
	}
	return 0
}

func (x *Deploy) GetFinishedBatches() int32 {
	if x != nil {
		return x.FinishedBatches
	}
	return 0
}

func (x *Deploy) GetFinishedReplicas() int32 {
	if x != nil {
		return x.FinishedReplicas
	}
	return 0
}

func (x *Deploy) GetFailedReplicas() int32 {
	if x != nil {
		return x.FailedReplicas
	}
	return 0
}

func (x *Deploy) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

func (x *Deploy) GetFinishedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishedAt
	}
	return nil
}

func (x *Deploy) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Deploy) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Deploy) GetBatchIntervalSeconds() int32 {
	if x != nil {
		return x.BatchIntervalSeconds
	}
	return 0
}

func (x *Deploy) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *Deploy) GetGracefulPeriodSeconds() int32 {
	if x != nil {
		return x.GracefulPeriodSeconds
	}
	return 0
}

func (x *Deploy) GetCanary() int32 {
	if x != nil {
		return x.Canary
	}
	return 0
}

type UpdateStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Canary               int32  `protobuf:"varint,1,opt,name=canary,proto3" json:"canary,omitempty"`
	BatchSize            string `protobuf:"bytes,2,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	NoPullIn             bool   `protobuf:"varint,3,opt,name=noPullIn,proto3" json:"noPullIn,omitempty"`
	Stage                string `protobuf:"bytes,4,opt,name=stage,proto3" json:"stage,omitempty"`
	Batches              int32  `protobuf:"varint,5,opt,name=batches,proto3" json:"batches,omitempty"`
	BatchIntervalSeconds int32  `protobuf:"varint,6,opt,name=batchIntervalSeconds,proto3" json:"batchIntervalSeconds,omitempty"`
	Mode                 string `protobuf:"bytes,7,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *UpdateStrategy) Reset() {
	*x = UpdateStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStrategy) ProtoMessage() {}

func (x *UpdateStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStrategy.ProtoReflect.Descriptor instead.
func (*UpdateStrategy) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateStrategy) GetCanary() int32 {
	if x != nil {
		return x.Canary
	}
	return 0
}

func (x *UpdateStrategy) GetBatchSize() string {
	if x != nil {
		return x.BatchSize
	}
	return ""
}

func (x *UpdateStrategy) GetNoPullIn() bool {
	if x != nil {
		return x.NoPullIn
	}
	return false
}

func (x *UpdateStrategy) GetStage() string {
	if x != nil {
		return x.Stage
	}
	return ""
}

func (x *UpdateStrategy) GetBatches() int32 {
	if x != nil {
		return x.Batches
	}
	return 0
}

func (x *UpdateStrategy) GetBatchIntervalSeconds() int32 {
	if x != nil {
		return x.BatchIntervalSeconds
	}
	return 0
}

func (x *UpdateStrategy) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type NonUpdateStrategy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatchSize            string   `protobuf:"bytes,1,opt,name=batchSize,proto3" json:"batchSize,omitempty"`
	PodsToDelete         []string `protobuf:"bytes,2,rep,name=podsToDelete,proto3" json:"podsToDelete,omitempty"`
	Batches              int32    `protobuf:"varint,3,opt,name=batches,proto3" json:"batches,omitempty"`
	BatchIntervalSeconds int32    `protobuf:"varint,4,opt,name=batchIntervalSeconds,proto3" json:"batchIntervalSeconds,omitempty"`
	Mode                 string   `protobuf:"bytes,5,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *NonUpdateStrategy) Reset() {
	*x = NonUpdateStrategy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NonUpdateStrategy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NonUpdateStrategy) ProtoMessage() {}

func (x *NonUpdateStrategy) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NonUpdateStrategy.ProtoReflect.Descriptor instead.
func (*NonUpdateStrategy) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{7}
}

func (x *NonUpdateStrategy) GetBatchSize() string {
	if x != nil {
		return x.BatchSize
	}
	return ""
}

func (x *NonUpdateStrategy) GetPodsToDelete() []string {
	if x != nil {
		return x.PodsToDelete
	}
	return nil
}

func (x *NonUpdateStrategy) GetBatches() int32 {
	if x != nil {
		return x.Batches
	}
	return 0
}

func (x *NonUpdateStrategy) GetBatchIntervalSeconds() int32 {
	if x != nil {
		return x.BatchIntervalSeconds
	}
	return 0
}

func (x *NonUpdateStrategy) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

type SidecarSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Image            string           `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`
	Envs             []*EnvVar        `protobuf:"bytes,3,rep,name=envs,proto3" json:"envs,omitempty"`
	Cpu              string           `protobuf:"bytes,4,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory           string           `protobuf:"bytes,5,opt,name=memory,proto3" json:"memory,omitempty"`
	GuaranteedCPU    string           `protobuf:"bytes,6,opt,name=guaranteedCPU,proto3" json:"guaranteedCPU,omitempty"`
	GuaranteedMemory string           `protobuf:"bytes,7,opt,name=guaranteedMemory,proto3" json:"guaranteedMemory,omitempty"`
	ContainerPorts   []*ContainerPort `protobuf:"bytes,8,rep,name=containerPorts,proto3" json:"containerPorts,omitempty"`
}

func (x *SidecarSpec) Reset() {
	*x = SidecarSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SidecarSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SidecarSpec) ProtoMessage() {}

func (x *SidecarSpec) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SidecarSpec.ProtoReflect.Descriptor instead.
func (*SidecarSpec) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{8}
}

func (x *SidecarSpec) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SidecarSpec) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *SidecarSpec) GetEnvs() []*EnvVar {
	if x != nil {
		return x.Envs
	}
	return nil
}

func (x *SidecarSpec) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *SidecarSpec) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

func (x *SidecarSpec) GetGuaranteedCPU() string {
	if x != nil {
		return x.GuaranteedCPU
	}
	return ""
}

func (x *SidecarSpec) GetGuaranteedMemory() string {
	if x != nil {
		return x.GuaranteedMemory
	}
	return ""
}

func (x *SidecarSpec) GetContainerPorts() []*ContainerPort {
	if x != nil {
		return x.ContainerPorts
	}
	return nil
}

type ApplicationSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID            int32                  `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	GroupID          int32                  `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AppName          string                 `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	InstanceName     string                 `protobuf:"bytes,4,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Replicas         *wrapperspb.Int32Value `protobuf:"bytes,5,opt,name=replicas,proto3" json:"replicas,omitempty"`
	ApplicationType  string                 `protobuf:"bytes,6,opt,name=applicationType,proto3" json:"applicationType,omitempty"`
	ApplicationLabel map[string]string      `protobuf:"bytes,7,rep,name=applicationLabel,proto3" json:"applicationLabel,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ApplicationSpec) Reset() {
	*x = ApplicationSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ApplicationSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ApplicationSpec) ProtoMessage() {}

func (x *ApplicationSpec) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ApplicationSpec.ProtoReflect.Descriptor instead.
func (*ApplicationSpec) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{9}
}

func (x *ApplicationSpec) GetAppID() int32 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *ApplicationSpec) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *ApplicationSpec) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *ApplicationSpec) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *ApplicationSpec) GetReplicas() *wrapperspb.Int32Value {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *ApplicationSpec) GetApplicationType() string {
	if x != nil {
		return x.ApplicationType
	}
	return ""
}

func (x *ApplicationSpec) GetApplicationLabel() map[string]string {
	if x != nil {
		return x.ApplicationLabel
	}
	return nil
}

type EnvVar struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvVar) Reset() {
	*x = EnvVar{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVar) ProtoMessage() {}

func (x *EnvVar) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVar.ProtoReflect.Descriptor instead.
func (*EnvVar) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{10}
}

func (x *EnvVar) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVar) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ContainerPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HostPort      int32  `protobuf:"varint,1,opt,name=hostPort,proto3" json:"hostPort,omitempty"`
	ContainerPort int32  `protobuf:"varint,2,opt,name=containerPort,proto3" json:"containerPort,omitempty"`
	Protocol      string `protobuf:"bytes,3,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Name          string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ContainerPort) Reset() {
	*x = ContainerPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerPort) ProtoMessage() {}

func (x *ContainerPort) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerPort.ProtoReflect.Descriptor instead.
func (*ContainerPort) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{11}
}

func (x *ContainerPort) GetHostPort() int32 {
	if x != nil {
		return x.HostPort
	}
	return 0
}

func (x *ContainerPort) GetContainerPort() int32 {
	if x != nil {
		return x.ContainerPort
	}
	return 0
}

func (x *ContainerPort) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *ContainerPort) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type DeployMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy *DeployMeta `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
}

func (x *DeployMetaRequest) Reset() {
	*x = DeployMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployMetaRequest) ProtoMessage() {}

func (x *DeployMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployMetaRequest.ProtoReflect.Descriptor instead.
func (*DeployMetaRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{12}
}

func (x *DeployMetaRequest) GetDeploy() *DeployMeta {
	if x != nil {
		return x.Deploy
	}
	return nil
}

type DeploysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter *DeployFilter `protobuf:"bytes,1,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *DeploysRequest) Reset() {
	*x = DeploysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploysRequest) ProtoMessage() {}

func (x *DeploysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploysRequest.ProtoReflect.Descriptor instead.
func (*DeploysRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{13}
}

func (x *DeploysRequest) GetFilter() *DeployFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

type ContinueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy *DeployMeta  `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Target *TargetState `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ContinueRequest) Reset() {
	*x = ContinueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContinueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContinueRequest) ProtoMessage() {}

func (x *ContinueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContinueRequest.ProtoReflect.Descriptor instead.
func (*ContinueRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{14}
}

func (x *ContinueRequest) GetDeploy() *DeployMeta {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *ContinueRequest) GetTarget() *TargetState {
	if x != nil {
		return x.Target
	}
	return nil
}

type NextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy *DeployMeta `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
}

func (x *NextRequest) Reset() {
	*x = NextRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NextRequest) ProtoMessage() {}

func (x *NextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NextRequest.ProtoReflect.Descriptor instead.
func (*NextRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{15}
}

func (x *NextRequest) GetDeploy() *DeployMeta {
	if x != nil {
		return x.Deploy
	}
	return nil
}

type WatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy *DeployMeta  `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
	Target *TargetState `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *WatchRequest) Reset() {
	*x = WatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchRequest) ProtoMessage() {}

func (x *WatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchRequest.ProtoReflect.Descriptor instead.
func (*WatchRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{16}
}

func (x *WatchRequest) GetDeploy() *DeployMeta {
	if x != nil {
		return x.Deploy
	}
	return nil
}

func (x *WatchRequest) GetTarget() *TargetState {
	if x != nil {
		return x.Target
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID           int32            `protobuf:"varint,1,opt,name=appID,proto3" json:"appID,omitempty"`
	GroupID         int32            `protobuf:"varint,2,opt,name=groupID,proto3" json:"groupID,omitempty"`
	AppName         string           `protobuf:"bytes,3,opt,name=appName,proto3" json:"appName,omitempty"`
	InstanceName    string           `protobuf:"bytes,4,opt,name=instanceName,proto3" json:"instanceName,omitempty"`
	Namespace       string           `protobuf:"bytes,5,opt,name=namespace,proto3" json:"namespace,omitempty"`
	ApplicationSpec *ApplicationSpec `protobuf:"bytes,6,opt,name=applicationSpec,proto3" json:"applicationSpec,omitempty"`
	Strategy        *UpdateStrategy  `protobuf:"bytes,7,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{17}
}

func (x *CreateRequest) GetAppID() int32 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *CreateRequest) GetGroupID() int32 {
	if x != nil {
		return x.GroupID
	}
	return 0
}

func (x *CreateRequest) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *CreateRequest) GetInstanceName() string {
	if x != nil {
		return x.InstanceName
	}
	return ""
}

func (x *CreateRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateRequest) GetApplicationSpec() *ApplicationSpec {
	if x != nil {
		return x.ApplicationSpec
	}
	return nil
}

func (x *CreateRequest) GetStrategy() *UpdateStrategy {
	if x != nil {
		return x.Strategy
	}
	return nil
}

type DeployReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploy *Deploy `protobuf:"bytes,1,opt,name=deploy,proto3" json:"deploy,omitempty"`
}

func (x *DeployReply) Reset() {
	*x = DeployReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeployReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeployReply) ProtoMessage() {}

func (x *DeployReply) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeployReply.ProtoReflect.Descriptor instead.
func (*DeployReply) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{18}
}

func (x *DeployReply) GetDeploy() *Deploy {
	if x != nil {
		return x.Deploy
	}
	return nil
}

type DeploysReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deploys []*Deploy `protobuf:"bytes,1,rep,name=deploys,proto3" json:"deploys,omitempty"`
}

func (x *DeploysReply) Reset() {
	*x = DeploysReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeploysReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploysReply) ProtoMessage() {}

func (x *DeploysReply) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploysReply.ProtoReflect.Descriptor instead.
func (*DeploysReply) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{19}
}

func (x *DeploysReply) GetDeploys() []*Deploy {
	if x != nil {
		return x.Deploys
	}
	return nil
}

type EmptyReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyReply) Reset() {
	*x = EmptyReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_deployflow_deployflow_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyReply) ProtoMessage() {}

func (x *EmptyReply) ProtoReflect() protoreflect.Message {
	mi := &file_deployflow_deployflow_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyReply.ProtoReflect.Descriptor instead.
func (*EmptyReply) Descriptor() ([]byte, []int) {
	return file_deployflow_deployflow_proto_rawDescGZIP(), []int{20}
}

var File_deployflow_deployflow_proto protoreflect.FileDescriptor

var file_deployflow_deployflow_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2f, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x0a, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x0c, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70,
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x22, 0x3d, 0x0a, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x22, 0x7b, 0x0a, 0x07, 0x50, 0x6f, 0x64, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xb0, 0x02, 0x0a, 0x05, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12,
	0x14, 0x0a, 0x05, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73,
	0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x6f, 0x64,
	0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x50, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x70, 0x6f,
	0x64, 0x73, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x22, 0xb1, 0x08, 0x0a, 0x06, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x32, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x76,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x28, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x65, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x38,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f,
	0x64, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x34,
	0x0a, 0x15, 0x67, 0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64,
	0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x67,
	0x72, 0x61, 0x63, 0x65, 0x66, 0x75, 0x6c, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x1c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x22, 0xda, 0x01, 0x0a,
	0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x63, 0x61, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x6f, 0x50, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x32, 0x0a, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0xb7, 0x01, 0x0a, 0x11, 0x4e, 0x6f,
	0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12,
	0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6f, 0x64, 0x73, 0x54, 0x6f, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x61, 0x74, 0x63, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x22, 0x9e, 0x02, 0x0a, 0x0b, 0x53, 0x69, 0x64, 0x65, 0x63, 0x61, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x26, 0x0a,
	0x04, 0x65, 0x6e, 0x76, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x52,
	0x04, 0x65, 0x6e, 0x76, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12,
	0x24, 0x0a, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x43, 0x50, 0x55,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x64, 0x43, 0x50, 0x55, 0x12, 0x2a, 0x0a, 0x10, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x64, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x41, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f,
	0x72, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x50, 0x6f, 0x72, 0x74, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x73, 0x22, 0x86, 0x03, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18,
	0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12,
	0x28, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x5d, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x43, 0x0a, 0x15, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x32, 0x0a,
	0x06, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x81, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x43, 0x0a, 0x11, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0x42, 0x0a, 0x0e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x06,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0x72,
	0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x3d, 0x0a, 0x0b, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x22, 0x6f, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x2e, 0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x12, 0x2f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x22, 0x9a, 0x02, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x45, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x22,
	0x39, 0x0a, 0x0b, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2a,
	0x0a, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x52, 0x06, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x22, 0x3c, 0x0a, 0x0c, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2c, 0x0a, 0x07, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x07, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x22, 0x0c, 0x0a, 0x0a, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x32, 0xab, 0x05, 0x0a, 0x0a, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x3f, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x1d, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x04, 0x47, 0x65, 0x74, 0x73, 0x12, 0x1a,
	0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c,
	0x6f, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x44, 0x0a, 0x06, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x12, 0x1d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x05,
	0x50, 0x61, 0x75, 0x73, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c,
	0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f,
	0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x44, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x1d, 0x2e, 0x64, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d,
	0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x42, 0x0a, 0x08, 0x43, 0x6f, 0x6e, 0x74, 0x69,
	0x6e, 0x75, 0x65, 0x12, 0x1b, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65,
	0x70, 0x6c, 0x6f, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x4e,
	0x65, 0x78, 0x74, 0x12, 0x17, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x12, 0x1d, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x05, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f,
	0x79, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x30, 0x01, 0x12, 0x48, 0x0a, 0x0c, 0x4c, 0x69,
	0x73, 0x74, 0x41, 0x6e, 0x64, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x64, 0x65, 0x70,
	0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x64, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66,
	0x6c, 0x6f, 0x77, 0x2e, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x30, 0x01, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x69, 0x74, 0x6f, 0x6e, 0x2d, 0x69, 0x6f, 0x2f, 0x74, 0x72, 0x69,
	0x74, 0x6f, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x64,
	0x65, 0x70, 0x6c, 0x6f, 0x79, 0x66, 0x6c, 0x6f, 0x77, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_deployflow_deployflow_proto_rawDescOnce sync.Once
	file_deployflow_deployflow_proto_rawDescData = file_deployflow_deployflow_proto_rawDesc
)

func file_deployflow_deployflow_proto_rawDescGZIP() []byte {
	file_deployflow_deployflow_proto_rawDescOnce.Do(func() {
		file_deployflow_deployflow_proto_rawDescData = protoimpl.X.CompressGZIP(file_deployflow_deployflow_proto_rawDescData)
	})
	return file_deployflow_deployflow_proto_rawDescData
}

var file_deployflow_deployflow_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_deployflow_deployflow_proto_goTypes = []interface{}{
	(*DeployMeta)(nil),            // 0: deployflow.DeployMeta
	(*DeployFilter)(nil),          // 1: deployflow.DeployFilter
	(*TargetState)(nil),           // 2: deployflow.TargetState
	(*PodInfo)(nil),               // 3: deployflow.PodInfo
	(*Batch)(nil),                 // 4: deployflow.Batch
	(*Deploy)(nil),                // 5: deployflow.Deploy
	(*UpdateStrategy)(nil),        // 6: deployflow.UpdateStrategy
	(*NonUpdateStrategy)(nil),     // 7: deployflow.NonUpdateStrategy
	(*SidecarSpec)(nil),           // 8: deployflow.SidecarSpec
	(*ApplicationSpec)(nil),       // 9: deployflow.ApplicationSpec
	(*EnvVar)(nil),                // 10: deployflow.EnvVar
	(*ContainerPort)(nil),         // 11: deployflow.ContainerPort
	(*DeployMetaRequest)(nil),     // 12: deployflow.DeployMetaRequest
	(*DeploysRequest)(nil),        // 13: deployflow.DeploysRequest
	(*ContinueRequest)(nil),       // 14: deployflow.ContinueRequest
	(*NextRequest)(nil),           // 15: deployflow.NextRequest
	(*WatchRequest)(nil),          // 16: deployflow.WatchRequest
	(*CreateRequest)(nil),         // 17: deployflow.CreateRequest
	(*DeployReply)(nil),           // 18: deployflow.DeployReply
	(*DeploysReply)(nil),          // 19: deployflow.DeploysReply
	(*EmptyReply)(nil),            // 20: deployflow.EmptyReply
	nil,                           // 21: deployflow.ApplicationSpec.ApplicationLabelEntry
	(*timestamppb.Timestamp)(nil), // 22: google.protobuf.Timestamp
	(*wrapperspb.Int32Value)(nil), // 23: google.protobuf.Int32Value
}
var file_deployflow_deployflow_proto_depIdxs = []int32{
	22, // 0: deployflow.DeployFilter.after:type_name -> google.protobuf.Timestamp
	3,  // 1: deployflow.Batch.pods:type_name -> deployflow.PodInfo
	22, // 2: deployflow.Batch.startedAt:type_name -> google.protobuf.Timestamp
	22, // 3: deployflow.Batch.finishedAt:type_name -> google.protobuf.Timestamp
	4,  // 4: deployflow.Deploy.conditions:type_name -> deployflow.Batch
	22, // 5: deployflow.Deploy.startedAt:type_name -> google.protobuf.Timestamp
	22, // 6: deployflow.Deploy.finishedAt:type_name -> google.protobuf.Timestamp
	22, // 7: deployflow.Deploy.updatedAt:type_name -> google.protobuf.Timestamp
	10, // 8: deployflow.SidecarSpec.envs:type_name -> deployflow.EnvVar
	11, // 9: deployflow.SidecarSpec.containerPorts:type_name -> deployflow.ContainerPort
	23, // 10: deployflow.ApplicationSpec.replicas:type_name -> google.protobuf.Int32Value
	21, // 11: deployflow.ApplicationSpec.applicationLabel:type_name -> deployflow.ApplicationSpec.ApplicationLabelEntry
	0,  // 12: deployflow.DeployMetaRequest.deploy:type_name -> deployflow.DeployMeta
	1,  // 13: deployflow.DeploysRequest.filter:type_name -> deployflow.DeployFilter
	0,  // 14: deployflow.ContinueRequest.deploy:type_name -> deployflow.DeployMeta
	2,  // 15: deployflow.ContinueRequest.target:type_name -> deployflow.TargetState
	0,  // 16: deployflow.NextRequest.deploy:type_name -> deployflow.DeployMeta
	0,  // 17: deployflow.WatchRequest.deploy:type_name -> deployflow.DeployMeta
	2,  // 18: deployflow.WatchRequest.target:type_name -> deployflow.TargetState
	9,  // 19: deployflow.CreateRequest.applicationSpec:type_name -> deployflow.ApplicationSpec
	6,  // 20: deployflow.CreateRequest.strategy:type_name -> deployflow.UpdateStrategy
	5,  // 21: deployflow.DeployReply.deploy:type_name -> deployflow.Deploy
	5,  // 22: deployflow.DeploysReply.deploys:type_name -> deployflow.Deploy
	12, // 23: deployflow.DeployFlow.Get:input_type -> deployflow.DeployMetaRequest
	13, // 24: deployflow.DeployFlow.Gets:input_type -> deployflow.DeploysRequest
	12, // 25: deployflow.DeployFlow.Cancel:input_type -> deployflow.DeployMetaRequest
	12, // 26: deployflow.DeployFlow.Pause:input_type -> deployflow.DeployMetaRequest
	12, // 27: deployflow.DeployFlow.Resume:input_type -> deployflow.DeployMetaRequest
	14, // 28: deployflow.DeployFlow.Continue:input_type -> deployflow.ContinueRequest
	15, // 29: deployflow.DeployFlow.Next:input_type -> deployflow.NextRequest
	12, // 30: deployflow.DeployFlow.Delete:input_type -> deployflow.DeployMetaRequest
	16, // 31: deployflow.DeployFlow.Watch:input_type -> deployflow.WatchRequest
	13, // 32: deployflow.DeployFlow.ListAndWatch:input_type -> deployflow.DeploysRequest
	18, // 33: deployflow.DeployFlow.Get:output_type -> deployflow.DeployReply
	19, // 34: deployflow.DeployFlow.Gets:output_type -> deployflow.DeploysReply
	18, // 35: deployflow.DeployFlow.Cancel:output_type -> deployflow.DeployReply
	18, // 36: deployflow.DeployFlow.Pause:output_type -> deployflow.DeployReply
	18, // 37: deployflow.DeployFlow.Resume:output_type -> deployflow.DeployReply
	18, // 38: deployflow.DeployFlow.Continue:output_type -> deployflow.DeployReply
	18, // 39: deployflow.DeployFlow.Next:output_type -> deployflow.DeployReply
	20, // 40: deployflow.DeployFlow.Delete:output_type -> deployflow.EmptyReply
	18, // 41: deployflow.DeployFlow.Watch:output_type -> deployflow.DeployReply
	19, // 42: deployflow.DeployFlow.ListAndWatch:output_type -> deployflow.DeploysReply
	33, // [33:43] is the sub-list for method output_type
	23, // [23:33] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_deployflow_deployflow_proto_init() }
func file_deployflow_deployflow_proto_init() {
	if File_deployflow_deployflow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_deployflow_deployflow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Batch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deploy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NonUpdateStrategy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SidecarSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ApplicationSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVar); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContinueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NextRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeployReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeploysReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_deployflow_deployflow_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_deployflow_deployflow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_deployflow_deployflow_proto_goTypes,
		DependencyIndexes: file_deployflow_deployflow_proto_depIdxs,
		MessageInfos:      file_deployflow_deployflow_proto_msgTypes,
	}.Build()
	File_deployflow_deployflow_proto = out.File
	file_deployflow_deployflow_proto_rawDesc = nil
	file_deployflow_deployflow_proto_goTypes = nil
	file_deployflow_deployflow_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DeployFlowClient is the client API for DeployFlow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeployFlowClient interface {
	Get(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (*DeployReply, error)
	Gets(ctx context.Context, in *DeploysRequest, opts ...grpc.CallOption) (*DeploysReply, error)
	Cancel(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_CancelClient, error)
	Pause(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_PauseClient, error)
	Resume(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_ResumeClient, error)
	Continue(ctx context.Context, in *ContinueRequest, opts ...grpc.CallOption) (*DeployReply, error)
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*DeployReply, error)
	Delete(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (*EmptyReply, error)
	// Watch watches Deploy status changes continuously till the target state is met.
	// If target state is not specified, use current desired target state in DeployFlow spec.
	// Watch will be stopped when the deploy is gone or finished or an error happens.
	Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (DeployFlow_WatchClient, error)
	// ListAndWatch lists Deploys first, and then watch Deploy changes infinitely.
	ListAndWatch(ctx context.Context, in *DeploysRequest, opts ...grpc.CallOption) (DeployFlow_ListAndWatchClient, error)
}

type deployFlowClient struct {
	cc grpc.ClientConnInterface
}

func NewDeployFlowClient(cc grpc.ClientConnInterface) DeployFlowClient {
	return &deployFlowClient{cc}
}

func (c *deployFlowClient) Get(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/deployflow.DeployFlow/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployFlowClient) Gets(ctx context.Context, in *DeploysRequest, opts ...grpc.CallOption) (*DeploysReply, error) {
	out := new(DeploysReply)
	err := c.cc.Invoke(ctx, "/deployflow.DeployFlow/Gets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployFlowClient) Cancel(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_CancelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeployFlow_serviceDesc.Streams[0], "/deployflow.DeployFlow/Cancel", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployFlowCancelClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployFlow_CancelClient interface {
	Recv() (*DeployReply, error)
	grpc.ClientStream
}

type deployFlowCancelClient struct {
	grpc.ClientStream
}

func (x *deployFlowCancelClient) Recv() (*DeployReply, error) {
	m := new(DeployReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployFlowClient) Pause(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_PauseClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeployFlow_serviceDesc.Streams[1], "/deployflow.DeployFlow/Pause", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployFlowPauseClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployFlow_PauseClient interface {
	Recv() (*DeployReply, error)
	grpc.ClientStream
}

type deployFlowPauseClient struct {
	grpc.ClientStream
}

func (x *deployFlowPauseClient) Recv() (*DeployReply, error) {
	m := new(DeployReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployFlowClient) Resume(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (DeployFlow_ResumeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeployFlow_serviceDesc.Streams[2], "/deployflow.DeployFlow/Resume", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployFlowResumeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployFlow_ResumeClient interface {
	Recv() (*DeployReply, error)
	grpc.ClientStream
}

type deployFlowResumeClient struct {
	grpc.ClientStream
}

func (x *deployFlowResumeClient) Recv() (*DeployReply, error) {
	m := new(DeployReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployFlowClient) Continue(ctx context.Context, in *ContinueRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/deployflow.DeployFlow/Continue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployFlowClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/deployflow.DeployFlow/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployFlowClient) Delete(ctx context.Context, in *DeployMetaRequest, opts ...grpc.CallOption) (*EmptyReply, error) {
	out := new(EmptyReply)
	err := c.cc.Invoke(ctx, "/deployflow.DeployFlow/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployFlowClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (DeployFlow_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeployFlow_serviceDesc.Streams[3], "/deployflow.DeployFlow/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployFlowWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployFlow_WatchClient interface {
	Recv() (*DeployReply, error)
	grpc.ClientStream
}

type deployFlowWatchClient struct {
	grpc.ClientStream
}

func (x *deployFlowWatchClient) Recv() (*DeployReply, error) {
	m := new(DeployReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deployFlowClient) ListAndWatch(ctx context.Context, in *DeploysRequest, opts ...grpc.CallOption) (DeployFlow_ListAndWatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeployFlow_serviceDesc.Streams[4], "/deployflow.DeployFlow/ListAndWatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &deployFlowListAndWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeployFlow_ListAndWatchClient interface {
	Recv() (*DeploysReply, error)
	grpc.ClientStream
}

type deployFlowListAndWatchClient struct {
	grpc.ClientStream
}

func (x *deployFlowListAndWatchClient) Recv() (*DeploysReply, error) {
	m := new(DeploysReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeployFlowServer is the server API for DeployFlow service.
type DeployFlowServer interface {
	Get(context.Context, *DeployMetaRequest) (*DeployReply, error)
	Gets(context.Context, *DeploysRequest) (*DeploysReply, error)
	Cancel(*DeployMetaRequest, DeployFlow_CancelServer) error
	Pause(*DeployMetaRequest, DeployFlow_PauseServer) error
	Resume(*DeployMetaRequest, DeployFlow_ResumeServer) error
	Continue(context.Context, *ContinueRequest) (*DeployReply, error)
	Next(context.Context, *NextRequest) (*DeployReply, error)
	Delete(context.Context, *DeployMetaRequest) (*EmptyReply, error)
	// Watch watches Deploy status changes continuously till the target state is met.
	// If target state is not specified, use current desired target state in DeployFlow spec.
	// Watch will be stopped when the deploy is gone or finished or an error happens.
	Watch(*WatchRequest, DeployFlow_WatchServer) error
	// ListAndWatch lists Deploys first, and then watch Deploy changes infinitely.
	ListAndWatch(*DeploysRequest, DeployFlow_ListAndWatchServer) error
}

// UnimplementedDeployFlowServer can be embedded to have forward compatible implementations.
type UnimplementedDeployFlowServer struct {
}

func (*UnimplementedDeployFlowServer) Get(context.Context, *DeployMetaRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDeployFlowServer) Gets(context.Context, *DeploysRequest) (*DeploysReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Gets not implemented")
}
func (*UnimplementedDeployFlowServer) Cancel(*DeployMetaRequest, DeployFlow_CancelServer) error {
	return status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (*UnimplementedDeployFlowServer) Pause(*DeployMetaRequest, DeployFlow_PauseServer) error {
	return status.Errorf(codes.Unimplemented, "method Pause not implemented")
}
func (*UnimplementedDeployFlowServer) Resume(*DeployMetaRequest, DeployFlow_ResumeServer) error {
	return status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (*UnimplementedDeployFlowServer) Continue(context.Context, *ContinueRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Continue not implemented")
}
func (*UnimplementedDeployFlowServer) Next(context.Context, *NextRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Next not implemented")
}
func (*UnimplementedDeployFlowServer) Delete(context.Context, *DeployMetaRequest) (*EmptyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDeployFlowServer) Watch(*WatchRequest, DeployFlow_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (*UnimplementedDeployFlowServer) ListAndWatch(*DeploysRequest, DeployFlow_ListAndWatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ListAndWatch not implemented")
}

func RegisterDeployFlowServer(s *grpc.Server, srv DeployFlowServer) {
	s.RegisterService(&_DeployFlow_serviceDesc, srv)
}

func _DeployFlow_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployFlowServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployflow.DeployFlow/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployFlowServer).Get(ctx, req.(*DeployMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployFlow_Gets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeploysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployFlowServer).Gets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployflow.DeployFlow/Gets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployFlowServer).Gets(ctx, req.(*DeploysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployFlow_Cancel_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployMetaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployFlowServer).Cancel(m, &deployFlowCancelServer{stream})
}

type DeployFlow_CancelServer interface {
	Send(*DeployReply) error
	grpc.ServerStream
}

type deployFlowCancelServer struct {
	grpc.ServerStream
}

func (x *deployFlowCancelServer) Send(m *DeployReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployFlow_Pause_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployMetaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployFlowServer).Pause(m, &deployFlowPauseServer{stream})
}

type DeployFlow_PauseServer interface {
	Send(*DeployReply) error
	grpc.ServerStream
}

type deployFlowPauseServer struct {
	grpc.ServerStream
}

func (x *deployFlowPauseServer) Send(m *DeployReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployFlow_Resume_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployMetaRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployFlowServer).Resume(m, &deployFlowResumeServer{stream})
}

type DeployFlow_ResumeServer interface {
	Send(*DeployReply) error
	grpc.ServerStream
}

type deployFlowResumeServer struct {
	grpc.ServerStream
}

func (x *deployFlowResumeServer) Send(m *DeployReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployFlow_Continue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContinueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployFlowServer).Continue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployflow.DeployFlow/Continue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployFlowServer).Continue(ctx, req.(*ContinueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployFlow_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployFlowServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployflow.DeployFlow/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployFlowServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployFlow_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployMetaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployFlowServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deployflow.DeployFlow/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployFlowServer).Delete(ctx, req.(*DeployMetaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployFlow_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployFlowServer).Watch(m, &deployFlowWatchServer{stream})
}

type DeployFlow_WatchServer interface {
	Send(*DeployReply) error
	grpc.ServerStream
}

type deployFlowWatchServer struct {
	grpc.ServerStream
}

func (x *deployFlowWatchServer) Send(m *DeployReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DeployFlow_ListAndWatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeploysRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeployFlowServer).ListAndWatch(m, &deployFlowListAndWatchServer{stream})
}

type DeployFlow_ListAndWatchServer interface {
	Send(*DeploysReply) error
	grpc.ServerStream
}

type deployFlowListAndWatchServer struct {
	grpc.ServerStream
}

func (x *deployFlowListAndWatchServer) Send(m *DeploysReply) error {
	return x.ServerStream.SendMsg(m)
}

var _DeployFlow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "deployflow.DeployFlow",
	HandlerType: (*DeployFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DeployFlow_Get_Handler,
		},
		{
			MethodName: "Gets",
			Handler:    _DeployFlow_Gets_Handler,
		},
		{
			MethodName: "Continue",
			Handler:    _DeployFlow_Continue_Handler,
		},
		{
			MethodName: "Next",
			Handler:    _DeployFlow_Next_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DeployFlow_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Cancel",
			Handler:       _DeployFlow_Cancel_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Pause",
			Handler:       _DeployFlow_Pause_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Resume",
			Handler:       _DeployFlow_Resume_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Watch",
			Handler:       _DeployFlow_Watch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListAndWatch",
			Handler:       _DeployFlow_ListAndWatch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "deployflow/deployflow.proto",
}
